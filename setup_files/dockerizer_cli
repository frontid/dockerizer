#!/bin/bash

# Move to project home folder.
_go_home_dir() {
  bin_path=$(which _command_wrapper_exec)

    if [ -z bin_path ]; then
        project_path="."
    else
        project_path="$(dirname $bin_path)/../"
    fi

    cd $project_path > /dev/null
}

# Check if the .docker.env (and optionally .docker.override.env).
# and run docker-compose commands.
_docker_project() {
    _go_home_dir

    if [ -e web/.docker.env ]; then

        if [ -e web/.docker.override.env ]; then
            paste -s -d '\n' web/.docker.env web/.docker.override.env > ./.env
        else
            cp web/.docker.env ./.env
        fi

    else
        if [ -e .docker.env ]; then
            cp .docker.env ./.env
        else
            echo -e "\e[31mYour project must provide \".docker.env\" file in order to work with dockerizer. Please see https://frontid.github.io/dockerizer/dockerenv/\e[0m"
            cd - > /dev/null
            exit 1
        fi
    fi
    
    # Load environment variables
    if [ -f .env ]; then
        set -o allexport
        source .env
        set +o allexport
    fi
    
    # Create temporal files for ssh configuration.
    if [[ "$1" == "up -d" ]]; then

        # We need to create empty files since docker will trend to
        # create dirs instead files. It's a known bug.
        touch .id
        touch .ssh_config

        # temporal file with ssh id_rsa.
        if [[ -f ~/.ssh/id_rsa ]]; then
            cat ~/.ssh/id_rsa > .id
        fi

        # temporal file with ssh config.
        if [[ -f ~/.ssh/config ]]; then
            cat ~/.ssh/config > .ssh_config
        fi

        ARGS_END="--remove-orphans"
    fi
    
    
    ARGS="-f $PWD/docker-compose.yml -f $PWD/docker-compose.override.yml"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ "$1" == "up -d" ]]; then
            ARGS="${ARGS} -f $PWD/docker-compose.override.mac.yml"
            docker-sync start
        elif [[ "$1" == "stop" ]]; then
            docker-sync stop
        fi
    fi

    # Loads additional docker compose files defined in .docker.env
    if [ ! -z "$CUSTOM_DOCKER_COMPOSE" ]; then
        echo "detected custom docker compose: $CUSTOM_DOCKER_COMPOSE"
        added_docker_compose=(${CUSTOM_DOCKER_COMPOSE})
        for new_docker_compose in "${added_docker_compose[@]}" 
        do
            ARGS+=" -f $PWD/${new_docker_compose}"
        done
    fi
    
    docker-compose ${ARGS} $1 ${ARGS_END}

    # Remove temporal files
    if [[ -f .id ]]; then
        rm -rf .id
    fi

    if [[ -f .ssh_config ]]; then
        rm -rf .ssh_config
    fi
    cd - > /dev/null
}

# run docker-compose commands on traefik service.
_traefik_service() {
    docker-compose -f /usr/local/bin/dk_traefik/docker-compose.yml $1
}

# run docker-compose commands on traefik service.
_track_dockerized_project() {
    touch ~/.dockerizer_track

    if grep -Fxq "$PWD" ~/.dockerizer_track
    then
        echo "This path already is tracked."
    else
        echo $PWD >> ~/.dockerizer_track
    fi
}

# Display dk help.
_show_help() {
   echo "Dockerizer is a docker development tool that allows you to run dockerized LAMP projects."
   echo
   echo "Github project: https://frontid.github.io/dockerizer/"
   echo
   echo "Syntax: dk [command]"
   echo
   echo "Commands:"
   echo "new              This command will prepare a dockerizer dir for you."
   echo "start [traefik]  When calling it in a project folder, it starts docker containers. If you add 'traefik' start the traefik service."
   echo "stop [traefik]   When calling it in a project folder, it stops docker containers. If you add 'traefik' stop the traefik service."
   echo "down             When calling it in a project folder, it stops and removes containers, networks, images, and volumes."
   echo "self-update      If there is a new version of the dk tool you can easily upgrade it with this command."
   echo "help             Show this help."
   echo
   echo "Direct commands: (without dk prefix)"
   echo "Adding --dkhelp option we have help."
   echo

   # List direct commands available.
   _go_home_dir
   for filename in bin/*; do
     baseFileName=$(basename "$filename")
     firstCharacter=${baseFileName:0:1}
     if [[ $firstCharacter != "_" ]]; then
       echo $(basename "$filename")
     fi
   done
}

# -----------------------------------------------


# Temporal solution to add pre-existing projects to the config file.
if [ ! -z "$1" ] && [ $1 = "track" ] && [ -z "$2" ] ; then
    _track_dockerized_project

# Logs
elif [ ! -z "$1" ] && [ $1 = "logs" ]; then
    _docker_project "logs $2"

# Start project?
elif [ ! -z "$1" ] && [ $1 = "start" ] && [ -z "$2" ] ; then
    _docker_project "up -d"

# Stop project?
elif [ ! -z "$1" ] && [ $1 = "stop" ] && [ -z "$2" ]; then
    _docker_project "stop"

# Stop and remove containers, networks, images, and volumes?
elif [ ! -z "$1" ] && [ $1 = "down" ] && [ -z "$2" ]; then
    _docker_project "down"

# Restart project?
elif [ ! -z "$1" ] && [ $1 = "restart" ] && [ -z "$2" ]; then
    # We dont use just "restart" because this: If you make changes to your docker-compose.yml
    # configuration these changes are not reflected after running this command.
    _docker_project "stop"
    _docker_project "up -d"

# Restart project specific
elif [ ! -z "$1" ] && [ $1 = "restart" ]; then
    _docker_project "stop $2"
    _docker_project "start $2"

# Start traefik?
elif [ ! -z "$1" ] && [ $1 = "start" ] && [ ! -z "$2" ] && [ $2 = "traefik" ]; then
    _traefik_service "up -d"

# Stop traefik?
elif [ ! -z "$1" ] && [ $1 = "stop" ] && [ ! -z "$2" ] && [ $2 = "traefik" ]; then
    _traefik_service "stop"

# Add new dockerizer
elif [ ! -z "$1" ] && [ $1 = "new" ] && [ ! -z "$2" ]; then
    git clone https://github.com/frontid/dockerizer.git $2
    cd $2
    ./setup.sh
    _track_dockerized_project

# Self update dockerizer
elif [ ! -z "$1" ] && [ $1 = "self-update" ]; then
    echo "Cleaning /tmp/dockerizer"
    echo "------------------------"

    rm -rf /tmp/dockerizer

    echo "Getting a new version of dockerizer"

    git clone git@github.com:frontid/dockerizer.git /tmp/dockerizer

    dk stop traefik

    echo "------------------------"
    echo "Updating..."
    echo "------------------------"

    sudo cp /tmp/dockerizer/setup_files/dockerizer_cli /usr/local/bin/dk
    sudo cp /tmp/dockerizer/setup_files/dockerizer_cli_bash_autocomplete /etc/bash_completion.d/dk
    sudo chmod +x /usr/local/bin/dk

    # ------------------------------

    traefik_path="/usr/local/bin/dk_traefik"
    sudo cp /tmp/dockerizer/setup_files/traefik-docker-compose.yml "$traefik_path/docker-compose.yml"
    sudo cp -R /tmp/dockerizer/setup_files/traefik $traefik_path

    # ------------------------------
    echo "Updating all dockerized instances."
    echo ""

    # Just to prevent errors.
    touch ~/.dockerizer_track

    while read path; do
        if [[ -d "$path" ]]; then
          cd "$path"
          echo "Updating $path"
          git reset --hard > /dev/null
          git pull origin master
          echo ""
        fi
    done <~/.dockerizer_track

    dk start traefik

    echo "Done."

elif [ ! -z "$1" ] && [ $1 = "help" ]; then
  _show_help
else
  _show_help
fi
